module.exports = /* eslint-disable */ [{"name":"DatePicker","description":"","props":{"passCurrentData":{"type":{"name":"func"},"required":true,"description":"","defaultValue":{"value":"function passCurrentData(year,month,e){console.log('dupa')}","computed":false}},"handleDatePick":{"type":{"name":"func"},"required":true,"description":"","defaultValue":{"value":"function handleDatePick(){console.log('dupa2')}","computed":false}},"classname":{"type":{"name":"string"},"required":true,"description":"","defaultValue":{"value":"\"dupa\"","computed":false}},"display":{"type":{"name":"string"},"required":true,"description":"","defaultValue":{"value":"\"table\"","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass DatePicker extends React.Component {\n    constructor (props){\n        super(props)\n        this.state={\n            currentYear:new Date().getFullYear(),\n            currentMonth:new Date().getMonth(),\n            currentDay:new Date().getDate(),\n            numberOfDays:[],\n            month:['January','February','March','April','May','June','July','August','September','October','November','December'],\n            weekdays:['Sun','Mon','Tue','Wed','Thr','Fri','Sat'],\n            today:new Date()\n        }\n    }\n    componentWillMount(){\n        this.props.passCurrentData(this.state.currentDay,this.state.currentMonth,this.state.currentYear);\n        this.generateCalendar(this.state.currentMonth,this.state.currentYear);\n    }\n    handleChangeMonth =(e)=>{\n        e.preventDefault();\n        let currentMonth=this.state.currentMonth;\n        let currentYear=this.state.currentYear;\n        //for previuos month\n        if(e.target.dataset.changemonth=='prev'){\n            if(currentMonth===0){\n                currentMonth=11;\n                currentYear--;\n            }else{\n                currentMonth--;\n            }\n        }else{\n            //for next month\n            if(currentMonth===11){\n                currentMonth=0;\n                currentYear++;\n            }else{\n                currentMonth++;\n            }\n        }\n        this.setState({currentMonth:currentMonth, currentYear:currentYear});\n        this.props.passCurrentData(this.state.currentDay,currentMonth,currentYear);\n        this.generateCalendar(currentMonth,currentYear);\n    }\n    generateCalendar = (currentMonth,currentYear)=>{\n        let numberOfDays=[];\n        let month = this.state.month;\n        if (month[currentMonth]==='February'){\n            if(currentYear%4!==0){\n                for(let i=1;i<=28;i++){\n                    numberOfDays.push(i);\n                }\n            }else{\n                for(let i=1;i<=28;i++){\n                    numberOfDays.push(i);\n                }\n            }\n        }\n        else if(month[currentMonth]==='January' || month[currentMonth]==='March'||month[currentMonth]==='May'||month[currentMonth]==='July'||month[currentMonth]==='August'||month[currentMonth]==='October'||month[currentMonth]==='December'){\n            for(let i=1;i<=31;i++){\n                numberOfDays.push(i);\n            }\n        }else {\n            for(let i=1;i<=30;i++){\n                numberOfDays.push(i);\n            }\n        }\n        this.setState({numberOfDays:numberOfDays});\n    }\n    setWeekday = (currentYear,currentMonth,currentDay) =>{\n        let thisDay=currentDay;\n        let thisMonth=parseInt(currentMonth+1);\n\n        thisMonth<10? (thisMonth='0'+thisMonth):thisMonth;\n        thisDay<10? (thisDay='0'+thisDay):thisDay;\n\n        let thisDate=currentYear+'-'+thisMonth+'-'+thisDay;\n        let dataWeekday=new Date(thisDate).getDay();\n        return 'each_day day_'+this.state.weekdays[dataWeekday];\n    }\n\n    render() {\n        let numberOfDays=this.state.numberOfDays;\n        let today = this.state.today;\n        let todayMonth=today.getMonth();\n        let todayYear=today.getFullYear();\n        let todayDay=today.getDate();\n        let calendar = numberOfDays.map((e,i)=>{\n          return (<div className={this.setWeekday(this.state.currentYear,this.state.currentMonth,e)}\n                        id={ (this.state.currentMonth===todayMonth && this.state.currentYear===todayYear && e===todayDay) ? 'today' : null} key={i}\n                        onClick={this.props.handleDatePick.bind(this.state.currentYear,this.state.currentMonth,e)}>\n                        {e}\n                  </div>)\n        });\n        let weekDays = this.state.weekdays.map((e,i)=>{\n            return( <div key=\"i\">{e}</div>)\n        })\n        return (<div className={this.props.classname+'_'+this.state.month[this.state.currentMonth]} style={{display:this.props.display}}>\n                    <div className='year'>{this.state.currentYear}</div>\n                    <div className='month_picture'></div>\n                    <div className='month'>\n                        <img src='./images/next.svg' data-changeMonth='prev' className='button_prev' onClick={this.handleChangeMonth}/>\n                        <p>{this.state.month[this.state.currentMonth]}</p>\n                        <img src='./images/next.svg' data-changeMonth='next' onClick={this.handleChangeMonth} className='button_next'/>\n                    </div>\n                    <div className='week_days'>\n                        {weekDays}\n                    </div>\n                    <div className='days'>{calendar}</div>\n                    <div className='buttons'>\n                    </div>\n                </div>)\n    }\n}\n\n\nDatePicker.propTypes = {\n  passCurrentData: PropTypes.func.isRequired,\n  handleDatePick:PropTypes.func.isRequired,\n  classname: PropTypes.string.isRequired,\n  display: PropTypes.string.isRequired\n};\n\nDatePicker.defaultProps = {\n  passCurrentData: function passCurrentData(year,month,e){console.log('dupa')},\n  handleDatePick:  function handleDatePick(){console.log('dupa2')},\n  classname:\"dupa\",\n  display:\"table\"\n};\n\n\nexport default DatePicker;\n","examples":[{"name":"ExamleDatePicker","description":"","code":"\nimport React from 'react';\nimport DatePicker from './../../../components/DatePicker/DatePicker';\n\nexport default function ExamleDatePicker() {\n  return <DatePicker />;\n}\n"}]},{"name":"EyeIcon","description":"SVG Eye Icon","code":"import React from 'react';\n\n/** SVG Eye Icon */\nfunction EyeIcon() {\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\n  return (\n    <svg width=\"16\" height=\"16\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 22 22\">\n      <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\n        <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\n        <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\n      </g>\n    </svg>\n  )\n}\n\nexport default EyeIcon;\n","examples":[{"name":"Example","description":"","code":"import React from 'react';\nimport EyeIcon from './../../../components/EyeIcon/EyeIcon';\n\nexport default function EyeIconExample() {\n  return <EyeIcon />;\n}\n"}]},{"name":"Footer","description":"","props":{"author":{"type":{"name":"string"},"required":true,"description":"","defaultValue":{"value":"'Małgorzata Grajewska'","computed":false}},"year":{"type":{"name":"string"},"required":true,"description":"","defaultValue":{"value":"'2017'","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport scss from './Footer.scss';\n\nclass Footer extends React.Component {\n  constructor(props){\n    super(props)\n      this.variables = scss.variables;\n  }\n\n    render() {\n      console.log(Object.values(scss));\n        return (\n          <div className={scss.footer}>\n          <p className={scss.copyrights}>©{this.props.year} by {this.props.author}</p>\n          </div>\n        )\n    }\n}\n\n\nFooter.propTypes = {\n  author: PropTypes.string.isRequired,\n  year:PropTypes.string.isRequired\n};\n\nFooter.defaultProps = {\n  author: 'Małgorzata Grajewska',\n  year: '2017'\n};\n\nexport default Footer;\n","examples":[{"name":"ExampleFooter","description":"Footer Custom message","code":"import React from 'react';\nimport Footer from './../../../components/Footer/Footer';\n\n/** Footer Custom message */\nexport default function ExampleFooter() {\n  return <Footer message=\"Footer\" />\n}\n"}]},{"name":"HelloWorld","description":"","props":{"message":{"type":{"name":"string"},"required":false,"description":"Message to display","defaultValue":{"value":"'World'","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**pointless comment */\nclass HelloWorld extends React.Component{\n  render(){\n      return <div>Hello {this.props.message}</div>\n  }\n}\n\nHelloWorld.propTypes = {\n  /** Message to display */\n  message: PropTypes.string\n};\n\nHelloWorld.defaultProps = {\n  message: 'World'\n};\n\nexport default HelloWorld;\n","examples":[{"name":"ExampleHelloWorld","description":"Custom message","code":"import React from 'react';\nimport HelloWorld from './../../../components/HelloWorld/HelloWorld';\n\n/** Custom message */\nexport default function ExampleHelloWorld() {\n  return <HelloWorld message=\"This is miedzyslowami's component library\" />\n}\n"}]},{"name":"Label","description":"Label with required field display, htmlFor, and block styling","props":{"htmlFor":{"type":{"name":"string"},"required":true,"description":"HTML ID for associated input"},"label":{"type":{"name":"string"},"required":true,"description":"Label text"},"required":{"type":{"name":"bool"},"required":false,"description":"Display asterisk after label if true"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\n/** Label with required field display, htmlFor, and block styling */\nfunction Label({htmlFor, label, required}) {\n  return (\n    <label style={{display: 'block'}} htmlFor={htmlFor}>\n      {label} { required && <span style={{color: 'red'}}> *</span> }\n    </label>\n  )\n}\n\nLabel.propTypes = {\n  /** HTML ID for associated input */\n  htmlFor: PropTypes.string.isRequired,\n\n  /** Label text */\n  label: PropTypes.string.isRequired,\n\n  /** Display asterisk after label if true */\n  required: PropTypes.bool\n};\n\nexport default Label;\n","examples":[{"name":"ExampleOptional","description":"Optional label","code":"import React from 'react';\nimport Label from './../../../components/Label/Label';\n\n/** Optional label */\nexport default function ExampleOptional() {\n  return <Label htmlFor=\"test\" label=\"test\" />\n}\n"},{"name":"ExampleRequired","description":"Required label","code":"import React from 'react';\nimport Label from './../../../components/Label/Label';\n\n/** Required label */\nexport default function ExampleRequired() {\n  return <Label htmlFor=\"test\" label=\"test\" required />\n}\n"}]},{"name":"Logo","description":"","code":"import React from 'react';\nimport scss from './Logo.scss';\n\nclass Logo extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            text:[]\n        }\n    }\n    componentWillMount(){\n        //logo text is extracted from scss file//\n        let textFromCss = Object.getOwnPropertyNames(scss)[0].substring(1,(Object.getOwnPropertyNames(scss)[0].length-1));\n        this.setState({text:[...textFromCss]});\n    }\n    render() {\n        let text = this.state.text.map((letter,i)=>{\n            return <div key={i} className={scss.text +' '+ scss[`text__${i + 1}`]}>{letter}</div>\n        })\n        return (\n                <div className={scss.logo} id={scss.logo}>\n                    {text}\n                </div>\n        )\n    }\n}\n\nexport default Logo;\n","examples":[{"name":"ExampleLogo","description":"","code":"import React from 'react';\nimport Logo from './../../../components/Logo/Logo';\n\nexport default function ExampleLogo() {\n  return <Logo />;\n}\n"}]},{"name":"MobileMenu","description":"","code":"import React from 'react';\nimport scss from './MobileMenu.scss';\n\nclass MobileMenu extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n                className:scss.unrotate__icon,\n                rotate:false\n        }\n    }\n    handleClick = (e) =>{\n        this.state.rotate===false ?  this.setState({className:scss.rotate__icon,rotate:true}) : this.setState({className:scss.unrotate__icon,rotate:false});\n        this.props.handleClick();\n    }\n    render() {\n        return (\n            <div id={scss.menu__icon} className={this.state.className} onClick={this.handleClick}>\n                  <svg id={scss.flower} xmlns='http://www.w3.org/2000/svg' x=\"0px\" y=\"0px\" viewBox=\"0 0 488.979 488.979\" role=\"img\" aria-labelledby=\"title desc\">\n                    <title id=\"title\">Menu icon</title>\n                    <desc id=\"desc\">Flower</desc>\n                    <path id={scss.flower__petal__1} d='M312.187,66.206C303.422,30.711,282.542,0,245.98,0c-36.569,0-58.866,29.183-58.866,65.744   c0,36.57,55.378,78.545,58.866,154.829C302.951,188.373,323.864,113.45,312.187,66.206z' />\n                  \t<path id={scss.flower__petal__2} d='M176.812,422.772c8.764,35.496,29.645,66.207,66.215,66.207c36.56,0,58.857-29.184,58.857-65.746   c0-36.569-55.372-78.543-58.857-154.827C186.046,300.606,165.143,375.529,176.812,422.772z' />\n                  \t<path id={scss.flower__petal__3} d='M61.022,204.811c31.666,18.285,95.69-8.685,163.505,26.437c0.597-65.442-53.835-121.005-100.578-134.522   c-35.121-10.158-72.153-7.435-90.446,24.231C15.226,152.631,29.339,186.526,61.022,204.811z' />\n                  \t<path id={scss.flower__petal__4} d='M427.977,284.168c-31.658-18.293-95.707,8.685-163.505-26.453c-0.613,65.451,53.843,121.02,100.586,134.53   c35.121,10.148,72.145,7.434,90.446-24.241C473.781,336.34,459.643,302.445,427.977,284.168z' />\n                  \t<path id={scss.flower__petal__5} d='M223.046,255.161c-56.375-33.243-131.719-13.875-166.777,19.845c-26.389,25.338-42.532,58.77-24.255,90.437   c18.277,31.674,54.712,36.394,86.393,18.094C150.074,365.26,158.719,296.338,223.046,255.161z' />\n                  \t<path id={scss.flower__petal__6} d='M265.944,233.802c56.367,33.258,131.72,13.883,166.785-19.853c26.356-25.338,42.516-58.764,24.239-90.445   c-18.293-31.65-54.71-36.363-86.376-18.086C338.933,123.695,330.263,192.656,265.944,233.802z' />\n                  </svg>\n          </div>\n        )\n    }\n}\n\nexport default MobileMenu;\n","examples":[{"name":"ExampleMobileMenu","description":"","code":"import React from 'react';\nimport MobileMenu from './../../../components/MobileMenu/MobileMenu';\n\nexport default function ExampleMobileMenu() {\n  return <MobileMenu />;\n}\n"}]},{"name":"PasswordInput","description":"Password input with integrated label, quality tips, and show password toggle.","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used by convention."},"value":{"type":{"name":"any"},"required":false,"description":"Password value"},"label":{"type":{"name":"string"},"required":false,"description":"Input label","defaultValue":{"value":"'Password'","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function called when password input value changes"},"maxLength":{"type":{"name":"number"},"required":false,"description":"Max password length accepted","defaultValue":{"value":"50","computed":false}},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder displayed when no password is entered"},"showVisibilityToggle":{"type":{"name":"bool"},"required":false,"description":"Set to true to show the toggle for displaying the currently entered password","defaultValue":{"value":"false","computed":false}},"quality":{"type":{"name":"number"},"required":false,"description":"Display password quality visually via ProgressBar, accepts a number between 0 and 100"},"error":{"type":{"name":"string"},"required":false,"description":"Validation error to display"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport ProgressBar from './../ProgressBar/ProgressBar';\nimport EyeIcon from './../EyeIcon/EyeIcon';\nimport TextInput from './../TextInput/TextInput';\n\n/** Password input with integrated label, quality tips, and show password toggle. */\nclass PasswordInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showPassword: false\n    }\n  }\n\n  toggleShowPassword = event => {\n    this.setState(prevState => {\n      return { showPassword: !prevState.showPassword };\n    });\n    if (event) event.preventDefault();\n  }\n\n  render() {\n    const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props } = this.props;\n    const { showPassword } = this.state;\n\n    return (\n      <TextInput\n        htmlId={htmlId}\n        label={label}\n        placeholder={placeholder}\n        type={showPassword ? 'text' : 'password'}\n        onChange={onChange}\n        value={value}\n        maxLength={maxLength}\n        error={error}\n        required\n        {...props}>\n        {\n          showVisibilityToggle &&\n          <a\n            href=\"\"\n            onClick={this.toggleShowPassword}\n            style={{ marginLeft: 5 }}>\n            <EyeIcon />\n          </a>\n        }\n        {\n          value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\n        }\n      </TextInput>\n    );\n  }\n}\n\nPasswordInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\n  name: PropTypes.string.isRequired,\n\n  /** Password value */\n  value: PropTypes.any,\n\n  /** Input label */\n  label: PropTypes.string,\n\n  /** Function called when password input value changes */\n  onChange: PropTypes.func.isRequired,\n\n  /** Max password length accepted */\n  maxLength: PropTypes.number,\n\n  /** Placeholder displayed when no password is entered */\n  placeholder: PropTypes.string,\n\n  /** Set to true to show the toggle for displaying the currently entered password */\n  showVisibilityToggle: PropTypes.bool,\n\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\n  quality: PropTypes.number,\n\n  /** Validation error to display */\n  error: PropTypes.string\n};\n\nPasswordInput.defaultProps = {\n  maxLength: 50,\n  showVisibilityToggle: false,\n  label: 'Password'\n};\n\nexport default PasswordInput;\n","examples":[{"name":"ExampleAllFeatures","description":"All features enabled","code":"import React from 'react';\nimport PasswordInput from './../../../components/PasswordInput/PasswordInput';\n\n/** All features enabled */\nclass ExampleAllFeatures extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      password: ''\n    };\n  }\n\n  getQuality() {\n    const length = this.state.password.length;\n    return length > 10 ? 100 : length * 10;\n  }\n\n  render() {\n    return (\n      <div>\n        <PasswordInput\n          htmlId=\"password-input-example-all-features\"\n          name=\"password\"\n          onChange={ event => this.setState({ password: event.target.value })}\n          value={this.state.password}\n          minLength={8}\n          placeholder=\"Enter password\"\n          showVisibilityToggle\n          quality={this.getQuality()}\n          {...this.props} />\n      </div>\n    )\n  }\n}\n\nexport default ExampleAllFeatures;\n"}]},{"name":"ProgressBar","description":"","props":{"percent":{"type":{"name":"number"},"required":true,"description":"Percent of progress completed"},"width":{"type":{"name":"number"},"required":true,"description":"Bar width"},"height":{"type":{"name":"number"},"required":false,"description":"Bar height","defaultValue":{"value":"5","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass ProgressBar extends React.Component {\n  getColor = (percent) => {\n    if (this.props.percent === 100) return 'green';\n    return this.props.percent > 50 ? 'lightgreen' : 'red';\n  }\n\n  getWidthAsPercentOfTotalWidth = () => {\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\n  }\n\n  render() {\n    const {percent, width, height} = this.props;\n    return (\n      <div style={{border: 'solid 1px lightgray', width: width}}>\n        <div style={{\n          width: this.getWidthAsPercentOfTotalWidth(),\n          height,\n          backgroundColor: this.getColor(percent)\n        }} />\n      </div>\n    );\n  }\n}\n\nProgressBar.propTypes = {\n  /** Percent of progress completed */\n  percent: PropTypes.number.isRequired,\n\n  /** Bar width */\n  width: PropTypes.number.isRequired,\n\n  /** Bar height */\n  height: PropTypes.number\n};\n\nProgressBar.defaultProps = {\n  height: 5\n};\n\nexport default ProgressBar;\n","examples":[{"name":"Example100Percent","description":"100% progress and height 20px","code":"import React from 'react';\nimport ProgressBar from './../../../components/ProgressBar/ProgressBar';\n\n/** 100% progress and height 20px */\nexport default function Example100Percent() {\n  return <ProgressBar percent={100} width={150} height={20} />\n}\n"}]},{"name":"RegistrationForm","description":"Registration form with built-in validation.","props":{"confirmationMessage":{"type":{"name":"string"},"required":false,"description":"Message displayed upon successful submission","defaultValue":{"value":"\"Thanks for registering!\"","computed":false}},"onSubmit":{"type":{"name":"func"},"required":true,"description":"Called when form is submitted"},"minPasswordLength":{"type":{"name":"number"},"required":false,"description":"Minimum password length","defaultValue":{"value":"8","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport TextInput from './../TextInput/TextInput';\nimport PasswordInput from './../PasswordInput/PasswordInput';\n\n/** Registration form with built-in validation. */\nclass RegistrationForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      user: {\n        email: '',\n        password: ''\n      },\n      errors: {},\n      submitted: false,\n    };\n  }\n\n  onChange = (event) => {\n    const user = this.state.user;\n    user[event.target.name] = event.target.value;\n    this.setState({user});\n  }\n\n  // Returns a number from 0 to 100 that represents password quality.\n  // For simplicity, just returning % of min length entered.\n  // Could enhance with checks for number, special char, unique characters, etc.\n  passwordQuality(password) {\n    if (!password) return null;\n    if (password.length >= this.props.minPasswordLength) return 100;\n    const percentOfMinLength = parseInt(password.length/this.props.minPasswordLength * 100, 10);\n    return percentOfMinLength;\n  }\n\n  validate({email, password}) {\n    const errors = {};\n    const {minPasswordLength} = this.props;\n\n    if (!email) errors.email = 'Email required.';\n    if (password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`;\n\n    this.setState({errors});\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\n    return formIsValid;\n  }\n\n  onSubmit = () => {\n    const {user} = this.state;\n    const formIsValid = this.validate(user);\n    if (formIsValid) {\n      this.props.onSubmit(user);\n      this.setState({submitted: true});\n    }\n  }\n\n  render() {\n    const {errors, submitted} = this.state;\n    const {email, password} = this.state.user;\n\n    return (\n      submitted ?\n      <h2>{this.props.confirmationMessage}</h2> :\n      <div>\n        <TextInput\n          htmlId=\"registration-form-email\"\n          name=\"email\"\n          onChange={this.onChange}\n          label=\"Email\"\n          value={email}\n          error={errors.email}\n          required />\n\n        <PasswordInput\n          htmlId=\"registration-form-password\"\n          name=\"password\"\n          value={password}\n          onChange={this.onChange}\n          quality={this.passwordQuality(password)}\n          showVisibilityToggle\n          maxLength={50}\n          error={errors.password} />\n\n        <input type=\"submit\" value=\"Register\" onClick={this.onSubmit} />\n      </div>\n    )\n  }\n}\n\nRegistrationForm.propTypes = {\n  /** Message displayed upon successful submission */\n  confirmationMessage: PropTypes.string,\n\n  /** Called when form is submitted */\n  onSubmit: PropTypes.func.isRequired,\n\n  /** Minimum password length */\n  minPasswordLength: PropTypes.number\n}\n\nRegistrationForm.defaultProps = {\n  confirmationMessage: \"Thanks for registering!\",\n  minPasswordLength: 8\n};\n\nexport default RegistrationForm;\n","examples":[{"name":"ExampleRegistrationForm","description":"","code":"import React from 'react';\nimport RegistrationForm from './../../../components/RegistrationForm/RegistrationForm';\n\nexport default class ExampleRegistrationForm extends React.Component {\n  onSubmit = (user) => {\n    console.log(user);\n  }\n\n  render() {\n    return <RegistrationForm onSubmit={this.onSubmit} />\n  }\n}\n"}]},{"name":"ScrollDownMenu","description":"","code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport MobileMenu from './../MobileMenu/MobileMenu';\nimport Logo from './../Logo/Logo';\nimport scss from './ScrollDownMenu.scss';\n\n\nclass ScrollDownMenu extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            menuItems:['About','Works','Contact'],\n            className:'',\n            showMenu:false\n        }\n    }\n    dropDownMenu = ()=>{\n      this.state.showMenu===false ? this.setState({className:scss.show__menu,showMenu:true}) : this.setState({className:'',showMenu:false});\n    }\n\n    render() {\n        let menuItems = this.state.menuItems.map((item,i)=>{\n            return <li data-name={item} key={i}>{item}</li>\n        })\n        return (\n          <header className={scss.header}>\n            <h1 className={scss.main__heading}></h1>\n              <div className={scss.wrapper} >\n                <Logo/>\n                <nav className={scss.mobile__menu} id={scss.mobile__menu}>\n                <MobileMenu handleClick={this.dropDownMenu}/>\n                <ul id={scss.navigation} className={this.state.className}>\n                {menuItems}\n                </ul></nav>\n              </div>\n          </header>\n        )\n    }\n}\n\nexport default ScrollDownMenu;\n","examples":[{"name":"ExampleScrollDownMenu","description":"","code":"import React from 'react';\nimport ScrollDownMenu from './../../../components/ScrollDownMenu/ScrollDownMenu';\n\nexport default function ExampleScrollDownMenu() {\n  return <ScrollDownMenu />;\n}\n"}]},{"name":"TextInput","description":"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used."},"label":{"type":{"name":"string"},"required":true,"description":"Input label"},"type":{"type":{"name":"enum","value":[{"value":"'text'","computed":false},{"value":"'number'","computed":false},{"value":"'password'","computed":false}]},"required":false,"description":"Input type","defaultValue":{"value":"\"text\"","computed":false}},"required":{"type":{"name":"bool"},"required":false,"description":"Mark label with asterisk if set to true","defaultValue":{"value":"false","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function to call onChange"},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder to display when empty"},"value":{"type":{"name":"any"},"required":false,"description":"Value"},"error":{"type":{"name":"string"},"required":false,"description":"String to display when error occurs"},"children":{"type":{"name":"node"},"required":false,"description":"Child component to display next to the input"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from './../Label/Label';\nimport scss from './textInput.scss';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\n  return (\n    <div style={{marginBottom: 16}}>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        style={error && {border: 'solid 1px red'}}\n        {...props}/>\n        {children}\n      {error && <div className={scss.error}>{error}</div>}\n    </div>\n  );\n};\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;\n","examples":[{"name":"ExampleError","description":"Required TextBox with error","code":"import React from 'react';\nimport TextInput from './../../../components/TextInput/TextInput';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInput\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n       />\n    )\n  }\n}\n"},{"name":"ExampleOptional","description":"Optional TextBox","code":"import React from 'react';\nimport TextInput from './../../../components/TextInput/TextInput';\n\n/** Optional TextBox */\nexport default class ExampleOptional extends React.Component {\n  render() {\n    return (\n      <TextInput\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n       />\n    )\n  }\n}\n"}]}]